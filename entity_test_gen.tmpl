// Code generated by "gen"; DO NOT EDIT.

package entities

{{ $ref := .Ref }}

{{ $imports := list "testing" "github.com/stretchr/testify/assert" }}

{{ $all := list "" }}

{{ range .Fields -}}
	{{ $all = append $all .Type }}
{{ end -}}

{{ range .Sub -}}
	{{ range .Fields -}}
		{{ $all = append $all .Type }}
	{{ end -}}
{{ end -}}

{{ range $all }}
	{{ if eq . "time.Time" }}

	{{end}}

	{{ if eq . "*time.Time" }}

	{{end}}

	{{ if eq . "uuid" }}
		{{ $imports = append $imports "github.com/google/uuid" }}
	{{end}}

	{{ if eq . "" }}
		{{ $imports = append $imports "context" }}
	{{ end }}
{{ end -}}

import (
{{range $imports}}
	"{{.}}"
{{end}}
)

func Test_New{{ .Ref }}(t *testing.T) {
	o := New{{ .Ref }}()

	assert.NotNil(t, o)
}

func Test_{{ .Ref }}Setters(t *testing.T) {
	in := New{{ .Ref }}()

	assert.NotNil(t, New{{ .Ref }}(){{ range .Fields  -}}.Set{{ .Ref }}(in.{{ .Ref }}){{ end -}})
}

func Test_New{{ .Ref }}WithValues(t *testing.T) {
	in := New{{ .Ref }}()
	o := New{{ .Ref }}WithValues(
	{{ range .Fields  -}}
	in.{{ .Ref }},
	{{ end -}}
	)

	assert.NotNil(t, o)
}

func Test_New{{ .Ref }}WithStruct(t *testing.T) {
	o := New{{ .Ref }}WithStruct(New{{ .Ref }}())

	assert.NotNil(t, o)
}

{{ range .Sub -}}

	{{ $r := .Ref }}

	func Test_New{{ .Ref }}(t *testing.T) {
		assert.NotNil(t, New{{ .Ref }}())
	}

	func Test_New{{ .Ref }}Setters(t *testing.T) {
		in := New{{ .Ref }}()

		assert.NotNil(t, New{{ .Ref }}(){{ range .Fields  -}}.Set{{ .Ref }}(in.{{ .Ref }}){{ end -}})
	}

	func Test_Map{{ .Ref }}To{{ $ref }}(t *testing.T) {
		from := New{{ .Ref }}()
		o := Map{{ .Ref }}To{{ $ref }}(from)

		assert.NotNil(t, o)
	}

	func Test_Map{{ $ref }}To{{ .Ref }}(t *testing.T) {
		from := New{{ $ref }}()
		o := Map{{ $ref }}To{{ .Ref }}(from)

		assert.NotNil(t, o)
	}

{{ end -}}

func Test_{{ $ref }}Create(t *testing.T) {
    o, err := New{{ $ref }}MockRepository().Create(context.Background(), New{{ $ref }}())

    assert.Nil(t, err)
    assert.NotNil(t, o)
}

func Test_{{ $ref }}ByID(t *testing.T) {
	o, err := New{{ $ref }}MockRepository().ByID(context.Background(), "random")

	assert.Nil(t, err)
	assert.NotNil(t, o)
}

func Test_{{ $ref }}UpdateByID(t *testing.T) {
	o, err := New{{ $ref }}MockRepository().UpdateByID(context.Background(), "random", &{{ $ref }}{})

	assert.Nil(t, err)
	assert.NotNil(t, o)
}

func Test_{{ $ref }}DeleteByID(t *testing.T) {
	err := New{{ $ref }}MockRepository().DeleteByID(context.Background(), "random")

	assert.Nil(t, err)
}

func Test_{{ $ref }}ListAll(t *testing.T) {
	o, err := New{{ $ref }}MockRepository().ListAll(context.Background())

	assert.Nil(t, err)
	assert.True(t, len(o) >= 1)
}

func Test_{{ $ref }}ListWithPagination(t *testing.T) {
	o, err := New{{ $ref }}MockRepository().ListWithPagination(context.Background(), 1, 10)

	assert.Nil(t, err)
	assert.True(t, len(o) >= 1)
}

func Test_{{ $ref }}ListWithPaginationAndFilter(t *testing.T) {
	o, err := New{{ $ref }}MockRepository().ListWithPaginationAndFilter(context.Background(), 1, 10, nil)

	assert.Nil(t, err)
	assert.True(t, len(o) >= 1)
}

func Test_{{ $ref }}ListWithStringQuery(t *testing.T) {
	o, err := New{{ $ref }}MockRepository().ListWithStringQuery(context.Background(), "")

	assert.Nil(t, err)
	assert.True(t, len(o) >= 1)
}

func Test_{{ $ref }}ListWithQuery(t *testing.T) {
	o, err := New{{ $ref }}MockRepository().ListWithQuery(context.Background(), nil)

	assert.Nil(t, err)
	assert.True(t, len(o) >= 1)
}
